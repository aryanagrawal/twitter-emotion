Tried a few different model combinations, got close enough accuracies


eps=14
def get_nn():
    embed_dim=64
    model = Sequential()
    model.add(Embedding(max_features, embed_dim, input_length=200))
    model.add(LSTM(11, activation='tanh'))
    model.add(Dense(64, activation='tanh', input_dim=200))
    model.add(Dense(128, activation='relu'))
    model.add(Dropout(0.2))
    model.add(Dense(64, activation='tanh'))
    model.add(Dense(64, activation='tanh'))
    #model.add(Dropout(0.1))
    model.add(Dense(64, activation='tanh'))
    
    model.add(Dense(11, activation='sigmoid'))
    model.compile(loss='binary_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])
    return model
acc: 45.94%

eps=20
def get_nn():
    embed_dim=64
    model = Sequential()
    model.add(Embedding(max_features, embed_dim, input_length=200))
    model.add(LSTM(11, activation='tanh'))
    model.add(Dense(64, activation='tanh', input_dim=200))
    model.add(Dense(64, activation='tanh'))
    model.add(Dense(64, activation='tanh'))
    #model.add(Dropout(0.1))
    model.add(Dense(64, activation='tanh'))
    model.add(Dense(64, activation='tanh'))
    model.add(Dense(11, activation='sigmoid'))
    model.compile(loss='binary_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])
    return model
acc: 45.7

eps=20
def get_nn():
    embed_dim=64
    model = Sequential()
    model.add(Embedding(max_features, embed_dim, input_length=200))
    model.add(LSTM(11, activation='tanh'))
    model.add(Dense(64, activation='tanh', input_dim=200))
    model.add(Dense(64, activation='tanh'))
    model.add(Dense(64, activation='tanh'))
    model.add(Dropout(0.1))
    model.add(Dense(11, activation='sigmoid'))
    model.compile(loss='binary_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])
    return model
# acc = 45.3%


eps=20
def get_nn():
    embed_dim=64
    model = Sequential()
    model.add(Embedding(max_features, embed_dim, input_length=200))
    model.add(LSTM(11, activation='tanh'))
    model.add(Dense(64, activation='tanh', input_dim=200))
    model.add(Dense(64, activation='tanh'))
    model.add(Dense(64, activation='tanh'))
    #model.add(Dropout(0.1))
    model.add(Dense(64, activation='tanh'))
    
    model.add(Dense(11, activation='sigmoid'))
    model.compile(loss='binary_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])
    return model
acc = 45.2%
